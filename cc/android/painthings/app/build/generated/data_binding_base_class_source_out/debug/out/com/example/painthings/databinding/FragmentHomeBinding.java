// Generated by view binder compiler. Do not edit!
package com.example.painthings.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.painthings.R;
import com.example.painthings.barchart.PopupBarChart;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final PopupBarChart bcEmotions;

  @NonNull
  public final MaterialButton btnShare;

  @NonNull
  public final CircleImageView circleImageView;

  @NonNull
  public final FloatingActionButton fabAdd;

  @NonNull
  public final View fabShadow;

  @NonNull
  public final ImageView ivToday;

  @NonNull
  public final LinearLayout layoutContentBottom;

  @NonNull
  public final LinearLayout layoutContentToday;

  @NonNull
  public final LinearLayout layoutToolbar;

  @NonNull
  public final LinearLayout layoutTopContent;

  @NonNull
  public final View notificationColor;

  @NonNull
  public final LinearLayout notificationContainer;

  @NonNull
  public final ProgressBar progressBarChart;

  @NonNull
  public final RecyclerView rvDate;

  @NonNull
  public final TextView tvHomeGreet;

  @NonNull
  public final TextView tvToday;

  @NonNull
  public final TextView tvTodayArtist;

  @NonNull
  public final TextView tvTodayTitle;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView, @NonNull PopupBarChart bcEmotions,
      @NonNull MaterialButton btnShare, @NonNull CircleImageView circleImageView,
      @NonNull FloatingActionButton fabAdd, @NonNull View fabShadow, @NonNull ImageView ivToday,
      @NonNull LinearLayout layoutContentBottom, @NonNull LinearLayout layoutContentToday,
      @NonNull LinearLayout layoutToolbar, @NonNull LinearLayout layoutTopContent,
      @NonNull View notificationColor, @NonNull LinearLayout notificationContainer,
      @NonNull ProgressBar progressBarChart, @NonNull RecyclerView rvDate,
      @NonNull TextView tvHomeGreet, @NonNull TextView tvToday, @NonNull TextView tvTodayArtist,
      @NonNull TextView tvTodayTitle) {
    this.rootView = rootView;
    this.bcEmotions = bcEmotions;
    this.btnShare = btnShare;
    this.circleImageView = circleImageView;
    this.fabAdd = fabAdd;
    this.fabShadow = fabShadow;
    this.ivToday = ivToday;
    this.layoutContentBottom = layoutContentBottom;
    this.layoutContentToday = layoutContentToday;
    this.layoutToolbar = layoutToolbar;
    this.layoutTopContent = layoutTopContent;
    this.notificationColor = notificationColor;
    this.notificationContainer = notificationContainer;
    this.progressBarChart = progressBarChart;
    this.rvDate = rvDate;
    this.tvHomeGreet = tvHomeGreet;
    this.tvToday = tvToday;
    this.tvTodayArtist = tvTodayArtist;
    this.tvTodayTitle = tvTodayTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bc_emotions;
      PopupBarChart bcEmotions = ViewBindings.findChildViewById(rootView, id);
      if (bcEmotions == null) {
        break missingId;
      }

      id = R.id.btn_share;
      MaterialButton btnShare = ViewBindings.findChildViewById(rootView, id);
      if (btnShare == null) {
        break missingId;
      }

      id = R.id.circleImageView;
      CircleImageView circleImageView = ViewBindings.findChildViewById(rootView, id);
      if (circleImageView == null) {
        break missingId;
      }

      id = R.id.fab_add;
      FloatingActionButton fabAdd = ViewBindings.findChildViewById(rootView, id);
      if (fabAdd == null) {
        break missingId;
      }

      id = R.id.fab_shadow;
      View fabShadow = ViewBindings.findChildViewById(rootView, id);
      if (fabShadow == null) {
        break missingId;
      }

      id = R.id.iv_today;
      ImageView ivToday = ViewBindings.findChildViewById(rootView, id);
      if (ivToday == null) {
        break missingId;
      }

      id = R.id.layout_content_bottom;
      LinearLayout layoutContentBottom = ViewBindings.findChildViewById(rootView, id);
      if (layoutContentBottom == null) {
        break missingId;
      }

      id = R.id.layout_content_today;
      LinearLayout layoutContentToday = ViewBindings.findChildViewById(rootView, id);
      if (layoutContentToday == null) {
        break missingId;
      }

      id = R.id.layout_toolbar;
      LinearLayout layoutToolbar = ViewBindings.findChildViewById(rootView, id);
      if (layoutToolbar == null) {
        break missingId;
      }

      id = R.id.layout_top_content;
      LinearLayout layoutTopContent = ViewBindings.findChildViewById(rootView, id);
      if (layoutTopContent == null) {
        break missingId;
      }

      id = R.id.notification_color;
      View notificationColor = ViewBindings.findChildViewById(rootView, id);
      if (notificationColor == null) {
        break missingId;
      }

      id = R.id.notification_container;
      LinearLayout notificationContainer = ViewBindings.findChildViewById(rootView, id);
      if (notificationContainer == null) {
        break missingId;
      }

      id = R.id.progressBarChart;
      ProgressBar progressBarChart = ViewBindings.findChildViewById(rootView, id);
      if (progressBarChart == null) {
        break missingId;
      }

      id = R.id.rv_date;
      RecyclerView rvDate = ViewBindings.findChildViewById(rootView, id);
      if (rvDate == null) {
        break missingId;
      }

      id = R.id.tvHomeGreet;
      TextView tvHomeGreet = ViewBindings.findChildViewById(rootView, id);
      if (tvHomeGreet == null) {
        break missingId;
      }

      id = R.id.tvToday;
      TextView tvToday = ViewBindings.findChildViewById(rootView, id);
      if (tvToday == null) {
        break missingId;
      }

      id = R.id.tv_today_artist;
      TextView tvTodayArtist = ViewBindings.findChildViewById(rootView, id);
      if (tvTodayArtist == null) {
        break missingId;
      }

      id = R.id.tv_today_title;
      TextView tvTodayTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTodayTitle == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, bcEmotions, btnShare,
          circleImageView, fabAdd, fabShadow, ivToday, layoutContentBottom, layoutContentToday,
          layoutToolbar, layoutTopContent, notificationColor, notificationContainer,
          progressBarChart, rvDate, tvHomeGreet, tvToday, tvTodayArtist, tvTodayTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
